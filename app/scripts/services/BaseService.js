// Generated by CoffeeScript 1.6.2
(function() {
  (function(ng, mod) {
    var Base;

    Base = function($log, $http, $q) {
      var BaseService, _cache, _contentType, _name, _url, _urlPrefix;

      _cache = {};
      _name = '';
      _url = '';
      _urlPrefix = '/api';
      _contentType = 'application/json+hal';
      return BaseService = (function() {
        function BaseService(name, url, options) {
          var hook, hooks, _i, _len;

          if (options == null) {
            options = {};
          }
          _name = name;
          _url = url;
          if (options.urlPrefix) {
            _urlPrefix = options.urlPrefix;
          }
          if (options.contentType) {
            _contentType = options.contentType;
          }
          hooks = ['beforeRequest', 'afterRequest', 'onBeforeUpdate', 'onAfterUpdate', 'onBeforeLoad', 'onAfterLoad', 'beforeSave', 'afterSave'];
          for (_i = 0, _len = hooks.length; _i < _len; _i++) {
            hook = hooks[_i];
            if (!this[hook]) {
              this[hook] = [];
            }
            if (options[hook]) {
              if (ng.isArray(options[hook])) {
                this[hook] = options[hook];
              } else {
                this[hook].push(options[hook]);
              }
            }
          }
        }

        BaseService.status = null;

        /* Generic send method
        */


        BaseService.prototype.send = function(requestData) {
          var method, _i, _len, _ref,
            _this = this;

          requestData.url = _urlPrefix ? _urlPrefix + requestData.url : requestData.url;
          requestData.headers = {
            Accept: _contentType
          };
          if (this.beforeRequest.length) {
            _ref = this.beforeRequest;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              method = _ref[_i];
              method(requestData);
            }
          }
          this.status = 'sending';
          return $http(requestData).then(function(data) {
            var _j, _len1, _ref1, _results;

            _this.status = null;
            if (_this.afterRequest.length) {
              _ref1 = _this.afterRequest;
              _results = [];
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                method = _ref1[_j];
                _results.push(method(data));
              }
              return _results;
            }
          });
        };

        /* Generic save method
        */


        BaseService.prototype.save = function(data) {
          var method, requestData, _i, _len, _ref;

          requestData = {
            method: 'POST',
            url: _url,
            data: data
          };
          if (this.beforeSave.length) {
            _ref = this.beforeSave;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              method = _ref[_i];
              method(requestData);
            }
          }
          return this.send(requestData).then(function(res) {
            if (this.afterSave) {
              return requestData = this.afterSave(res);
            }
          });
        };

        BaseService.prototype.update = function(id, data) {
          var method, requestData, _i, _len, _ref;

          requestData = {
            method: 'PUT',
            url: _url + '/' + id,
            data: data
          };
          $log.log('updating', data);
          if (this.beforeSave.length) {
            _ref = this.beforeSave;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              method = _ref[_i];
              method(requestData);
            }
          }
          return this.send(requestData);
        };

        BaseService.prototype.patch = function(id, data) {
          var method, requestData, _i, _len, _ref;

          requestData = {
            method: 'PATCH',
            url: _url + '/' + id,
            data: data
          };
          if (this.beforeSave.length) {
            _ref = this.beforeSave;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              method = _ref[_i];
              method(requestData);
            }
          }
          return this.send(requestData);
        };

        BaseService.prototype["delete"] = function(id) {
          return this.send({
            method: 'DELETE',
            url: _url + '/' + id
          });
        };

        /* Get a list of items
        */


        BaseService.prototype.list = function() {
          return this.send({
            method: 'GET',
            url: _url
          });
        };

        /* Get a specific item
        */


        BaseService.prototype.get = function(id) {
          return this.send({
            method: 'GET',
            url: _url + '/' + id
          });
        };

        return BaseService;

      })();
    };
    Base.$inject = ['$log', '$http', '$q'];
    return mod.factory('BaseService', Base);
    /*.factory('ParentObject', ['BaseObject', '$cookies', (BaseObject, $cookies) ->
      class ParentObject extends BaseObject
        constructor: (options) ->
          super(options)
          $log.log('Parent created with', options)
        save: ->
          @send(@)
    ])
    .factory('ChildObject', ['ParentObject', (ParentObject) ->
      class ChildObject extends ParentObject
        save: ->
          @name = 'child'
          super()
    ])
    .factory('SingletonObject', ['BaseObject', (BaseObject) ->
      class SingletonObject extends BaseObject
        get: (args) ->
          @send(args)
    
      # Since the factory is also a constructor, you can use it to return a singleton instance
      new SingletonObject()
    ])
    .controller('MyCtrl', ['$scope', 'ChildObject', 'SingletonObject', ($scope, ChildObject, SingletonObject) ->
      $scope.item = new ChildObject()
      SingletonObject.get().then (data) ->
        $scope.options = data
    ])
    */

  })(angular, angular.module('Services', []));

}).call(this);
